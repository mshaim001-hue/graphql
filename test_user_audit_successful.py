#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å user_audit
"""

import requests
import json
import os

def load_token():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞"""
    try:
        with open('.env', 'r') as f:
            for line in f:
                if line.startswith('GRAPHQL_TOKEN='):
                    return line.split('=', 1)[1].strip().strip('"')
    except FileNotFoundError:
        print("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

def test_user_audit_successful():
    """–¢–µ—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å user_audit"""
    token = load_token()
    if not token:
        return
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    query = """
    query {
        object(order_by: {createdAt: desc}) {
            id
            name
            type
            attrs
            createdAt
            updatedAt
            campus
            authorId
        }
        progress(where: {object: {type: {_eq: "project"}}}) {
            grade
            createdAt
            path
            object {
                id
                name
                type
                attrs
                campus
            }
        }
    }
    """
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å user_audit...")
    
    response = requests.post(
        'https://01.tomorrow-school.ai/api/graphql-engine/v1/graphql',
        json={'query': query},
        headers=headers
    )
    
    if response.status_code == 200:
        data = response.json()
        
        if 'errors' in data:
            print("‚ùå –û—à–∏–±–∫–∏ GraphQL:")
            for error in data['errors']:
                print(f"   - {error['message']}")
        else:
            all_objects = data['data']['object']
            progress_data = data['data']['progress']
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_objects)} –æ–±—ä–µ–∫—Ç–æ–≤ –∏ {len(progress_data)} –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã —Å user_audit
            user_audit_objects = []
            for obj in all_objects:
                validations = obj.get('attrs', {}).get('validations', [])
                for validation in validations:
                    if validation.get('type') == 'user_audit':
                        user_audit_objects.append(obj)
                        break
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(user_audit_objects)} –æ–±—ä–µ–∫—Ç–æ–≤ —Å user_audit")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            objects_dict = {obj['id']: obj for obj in user_audit_objects}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å user_audit –ø–æ —è–∑—ã–∫–∞–º
            successful_by_language = {}
            total_by_language = {}
            
            for progress in progress_data:
                project_id = progress['object']['id']
                if project_id in objects_dict:
                    project = objects_dict[project_id]
                    language = project.get('attrs', {}).get('language', 'Unknown')
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —è–∑—ã–∫–∞
                    if language not in total_by_language:
                        total_by_language[language] = 0
                        successful_by_language[language] = 0
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
                    total_by_language[language] += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω—ã–º (grade >= 1)
                    if progress.get('grade') is not None and progress.get('grade') >= 1:
                        successful_by_language[language] += 1
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–µ–∫—Ç–æ–≤
            sorted_languages = sorted(total_by_language.items(), key=lambda x: x[1], reverse=True)
            
            print(f"\nüìä –£—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å user_audit –ø–æ —è–∑—ã–∫–∞–º:")
            print("=" * 80)
            print(f"{'–Ø–∑—ã–∫':<25} {'–í—Å–µ–≥–æ':<8} {'–£—Å–ø–µ—à–Ω—ã—Ö':<10} {'–ü—Ä–æ—Ü–µ–Ω—Ç':<10}")
            print("-" * 80)
            
            for language, total in sorted_languages:
                successful = successful_by_language.get(language, 0)
                percentage = (successful / total * 100) if total > 0 else 0
                print(f"{language:<25} {total:<8} {successful:<10} {percentage:>6.1f}%")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            graph_data = []
            for language, total in sorted_languages:
                successful = successful_by_language.get(language, 0)
                percentage = (successful / total * 100) if total > 0 else 0
                graph_data.append({
                    'language': language,
                    'total': total,
                    'successful': successful,
                    'percentage': percentage
                })
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 —è–∑—ã–∫–æ–≤
            print(f"\nüèÜ –¢–æ–ø-10 —è–∑—ã–∫–æ–≤ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ (user_audit):")
            for i, data in enumerate(graph_data[:10], 1):
                print(f"   {i:2d}. {data['language']:<20}: {data['successful']}/{data['total']} ({data['percentage']:.1f}%)")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–±—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            print(f"\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–±—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
            print("-" * 50)
            print(f"–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å user_audit: {len(user_audit_objects)}")
            print(f"–ü—Ä–æ–µ–∫—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: {sum(total_by_language.values())}")
            print(f"–£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {sum(successful_by_language.values())}")
            
            if sum(total_by_language.values()) > 0:
                overall_success_rate = (sum(successful_by_language.values()) / sum(total_by_language.values())) * 100
                print(f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {overall_success_rate:.1f}%")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            analysis_data = {
                'total_user_audit_objects': len(user_audit_objects),
                'projects_with_progress': sum(total_by_language.values()),
                'successful_projects': sum(successful_by_language.values()),
                'overall_success_rate': overall_success_rate if sum(total_by_language.values()) > 0 else 0,
                'languages_data': graph_data,
                'top_10_languages': graph_data[:10]
            }
            
            filename = "user_audit_successful_analysis.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(analysis_data, f, indent=2, ensure_ascii=False)
            
            print(f"\nüìÅ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            print(f"\nüé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø-5 —è–∑—ã–∫–æ–≤:")
            print("=" * 50)
            
            for data in graph_data[:5]:
                language = data['language']
                total = data['total']
                successful = data['successful']
                percentage = data['percentage']
                
                # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–ª–æ—Å—É
                bar_length = 30
                successful_bars = int((successful / total) * bar_length) if total > 0 else 0
                total_bars = bar_length
                
                bar = '‚ñà' * successful_bars + '‚ñë' * (total_bars - successful_bars)
                
                print(f"{language:<20}: {bar} {successful}/{total} ({percentage:.1f}%)")
    else:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")

if __name__ == "__main__":
    test_user_audit_successful()