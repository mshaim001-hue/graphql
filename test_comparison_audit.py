#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å user_audit –∏ –±–µ–∑ –Ω–µ–≥–æ
"""

import requests
import json
import os

def load_token():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞"""
    try:
        with open('.env', 'r') as f:
            for line in f:
                if line.startswith('GRAPHQL_TOKEN='):
                    return line.split('=', 1)[1].strip().strip('"')
    except FileNotFoundError:
        print("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

def test_comparison_audit():
    """–¢–µ—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å user_audit –∏ –±–µ–∑ –Ω–µ–≥–æ"""
    token = load_token()
    if not token:
        return
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    query = """
    query {
        object(order_by: {createdAt: desc}) {
            id
            name
            type
            attrs
            createdAt
            updatedAt
            campus
            authorId
        }
        progress(where: {object: {type: {_eq: "project"}}}) {
            grade
            createdAt
            path
            object {
                id
                name
                type
                attrs
                campus
            }
        }
    }
    """
    
    print("üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å user_audit –∏ –±–µ–∑ –Ω–µ–≥–æ...")
    
    response = requests.post(
        'https://01.tomorrow-school.ai/api/graphql-engine/v1/graphql',
        json={'query': query},
        headers=headers
    )
    
    if response.status_code == 200:
        data = response.json()
        
        if 'errors' in data:
            print("‚ùå –û—à–∏–±–∫–∏ GraphQL:")
            for error in data['errors']:
                print(f"   - {error['message']}")
        else:
            all_objects = data['data']['object']
            progress_data = data['data']['progress']
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_objects)} –æ–±—ä–µ–∫—Ç–æ–≤ –∏ {len(progress_data)} –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã —Å user_audit –∏ –±–µ–∑ –Ω–µ–≥–æ
            user_audit_projects = []
            non_user_audit_projects = []
            
            for obj in all_objects:
                if obj.get('type') == 'project':
                    validations = obj.get('attrs', {}).get('validations', [])
                    has_user_audit = False
                    for validation in validations:
                        if validation.get('type') == 'user_audit':
                            has_user_audit = True
                            break
                    
                    if has_user_audit:
                        user_audit_projects.append(obj)
                    else:
                        non_user_audit_projects.append(obj)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(user_audit_projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å user_audit")
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(non_user_audit_projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ user_audit")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å user_audit
            user_audit_objects_dict = {obj['id']: obj for obj in user_audit_projects}
            user_audit_successful = 0
            user_audit_total = 0
            
            for progress in progress_data:
                project_id = progress['object']['id']
                if project_id in user_audit_objects_dict:
                    user_audit_total += 1
                    if progress.get('grade') is not None and progress.get('grade') >= 1:
                        user_audit_successful += 1
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ user_audit
            non_user_audit_objects_dict = {obj['id']: obj for obj in non_user_audit_projects}
            non_user_audit_successful = 0
            non_user_audit_total = 0
            
            for progress in progress_data:
                project_id = progress['object']['id']
                if project_id in non_user_audit_objects_dict:
                    non_user_audit_total += 1
                    if progress.get('grade') is not None and progress.get('grade') >= 1:
                        non_user_audit_successful += 1
            
            print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:")
            print("=" * 70)
            print(f"{'–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞':<20} {'–í—Å–µ–≥–æ':<8} {'–£—Å–ø–µ—à–Ω—ã—Ö':<10} {'–ü—Ä–æ—Ü–µ–Ω—Ç':<10}")
            print("-" * 70)
            
            user_audit_percentage = (user_audit_successful / user_audit_total * 100) if user_audit_total > 0 else 0
            non_user_audit_percentage = (non_user_audit_successful / non_user_audit_total * 100) if non_user_audit_total > 0 else 0
            
            print(f"{'–° user_audit':<20} {user_audit_total:<8} {user_audit_successful:<10} {user_audit_percentage:>6.1f}%")
            print(f"{'–ë–µ–∑ user_audit':<20} {non_user_audit_total:<8} {non_user_audit_successful:<10} {non_user_audit_percentage:>6.1f}%")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ —è–∑—ã–∫–∞–º –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å user_audit
            print(f"\nüìä –ü—Ä–æ–µ–∫—Ç—ã —Å user_audit –ø–æ —è–∑—ã–∫–∞–º:")
            print("-" * 50)
            
            user_audit_languages = {}
            for project in user_audit_projects:
                language = project.get('attrs', {}).get('language', 'Unknown')
                user_audit_languages[language] = user_audit_languages.get(language, 0) + 1
            
            for language, count in sorted(user_audit_languages.items(), key=lambda x: x[1], reverse=True)[:10]:
                print(f"   {language}: {count} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ —è–∑—ã–∫–∞–º –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ user_audit
            print(f"\nüìä –ü—Ä–æ–µ–∫—Ç—ã –±–µ–∑ user_audit –ø–æ —è–∑—ã–∫–∞–º:")
            print("-" * 50)
            
            non_user_audit_languages = {}
            for project in non_user_audit_projects:
                language = project.get('attrs', {}).get('language', 'Unknown')
                non_user_audit_languages[language] = non_user_audit_languages.get(language, 0) + 1
            
            for language, count in sorted(non_user_audit_languages.items(), key=lambda x: x[1], reverse=True)[:10]:
                print(f"   {language}: {count} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–º–ø—É—Å—ã
            print(f"\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞–º–ø—É—Å–∞–º:")
            print("-" * 50)
            
            user_audit_campuses = {}
            for project in user_audit_projects:
                campus = project.get('campus', 'None')
                user_audit_campuses[campus] = user_audit_campuses.get(campus, 0) + 1
            
            non_user_audit_campuses = {}
            for project in non_user_audit_projects:
                campus = project.get('campus', 'None')
                non_user_audit_campuses[campus] = non_user_audit_campuses.get(campus, 0) + 1
            
            print(f"–° user_audit:")
            for campus, count in sorted(user_audit_campuses.items(), key=lambda x: x[1], reverse=True):
                print(f"   {campus}: {count} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            
            print(f"\n–ë–µ–∑ user_audit:")
            for campus, count in sorted(non_user_audit_campuses.items(), key=lambda x: x[1], reverse=True):
                print(f"   {campus}: {count} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            comparison_data = {
                'user_audit_projects': {
                    'total': len(user_audit_projects),
                    'with_progress': user_audit_total,
                    'successful': user_audit_successful,
                    'success_rate': user_audit_percentage,
                    'languages': user_audit_languages,
                    'campuses': user_audit_campuses
                },
                'non_user_audit_projects': {
                    'total': len(non_user_audit_projects),
                    'with_progress': non_user_audit_total,
                    'successful': non_user_audit_successful,
                    'success_rate': non_user_audit_percentage,
                    'languages': non_user_audit_languages,
                    'campuses': non_user_audit_campuses
                }
            }
            
            filename = "audit_comparison_analysis.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(comparison_data, f, indent=2, ensure_ascii=False)
            
            print(f"\nüìÅ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
            
            # –í—ã–≤–æ–¥—ã
            print(f"\nüí° –í—ã–≤–æ–¥—ã:")
            print("-" * 30)
            if user_audit_percentage > non_user_audit_percentage:
                print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç—ã —Å user_audit –∏–º–µ—é—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫—É—é —É—Å–ø–µ—à–Ω–æ—Å—Ç—å")
                print(f"   ({user_audit_percentage:.1f}% vs {non_user_audit_percentage:.1f}%)")
            elif user_audit_percentage < non_user_audit_percentage:
                print(f"‚ùå –ü—Ä–æ–µ–∫—Ç—ã –±–µ–∑ user_audit –∏–º–µ—é—Ç –±–æ–ª–µ–µ –≤—ã—Å–æ–∫—É—é —É—Å–ø–µ—à–Ω–æ—Å—Ç—å")
                print(f"   ({non_user_audit_percentage:.1f}% vs {user_audit_percentage:.1f}%)")
            else:
                print(f"‚öñÔ∏è –ü—Ä–æ–µ–∫—Ç—ã —Å user_audit –∏ –±–µ–∑ –Ω–µ–≥–æ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —É—Å–ø–µ—à–Ω–æ—Å—Ç—å")
                print(f"   ({user_audit_percentage:.1f}%)")
    else:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")

if __name__ == "__main__":
    test_comparison_audit()