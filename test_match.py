#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã public.match
"""

import os
import json
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def get_jwt_token():
    """–ü–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞"""
    token = os.getenv('GRAPHQL_TOKEN')
    if not token:
        raise ValueError("GRAPHQL_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    return token

def make_graphql_query(query, token):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å GraphQL –∑–∞–ø—Ä–æ—Å"""
    url = "https://01.tomorrow-school.ai/api/graphql-engine/v1/graphql"
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    response = requests.post(url, json={'query': query}, headers=headers)
    
    if response.status_code != 200:
        raise Exception(f"HTTP error! status: {response.status_code}")
    
    data = response.json()
    
    if 'errors' in data:
        raise Exception(f"GraphQL errors: {data['errors']}")
    
    return data['data']

def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        token = get_jwt_token()
        print(f"‚úÖ JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
        
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã match —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
        query = """
        query {
            match(where: {object: {type: {_eq: "project"}}}) {
                id
                userId
                eventId
                createdAt
                updatedAt
                matchId
                confirmed
                bet
                result
                path
                campus
                object {
                    id
                    name
                    type
                    attrs
                }
            }
        }
        """
        
        print(f"\n{'='*60}")
        print(f"üîç –¢–ï–°–¢ MATCH (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç—ã)")
        print(f"{'='*60}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        print("–í—ã–ø–æ–ª–Ω—è–µ–º GraphQL –∑–∞–ø—Ä–æ—Å...")
        data = make_graphql_query(query, token)
        
        matches = data.get('match', [])
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} –∑–∞–ø–∏—Å–µ–π match")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        filename = f"match_data_{len(matches)}_items.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(matches, f, indent=2, ensure_ascii=False)
        print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
        print(f"\nüìä –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π:")
        for i, match in enumerate(matches[:5]):
            print(f"\n--- Match #{i+1} ---")
            print(f"ID: {match.get('id', 'N/A')}")
            print(f"UserId: {match.get('userId', 'N/A')}")
            print(f"EventId: {match.get('eventId', 'N/A')}")
            print(f"MatchId: {match.get('matchId', 'N/A')}")
            print(f"Confirmed: {match.get('confirmed', 'N/A')}")
            print(f"Bet: {match.get('bet', 'N/A')}")
            print(f"Result: {match.get('result', 'N/A')}")
            print(f"Path: {match.get('path', 'N/A')}")
            print(f"Campus: {match.get('campus', 'N/A')}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ
            object_info = match.get('object', {})
            if object_info:
                print(f"Object: {object_info.get('name', 'N/A')} (Type: {object_info.get('type', 'N/A')})")
            else:
                print(f"Object: N/A")
            
            print(f"Created: {match.get('createdAt', 'N/A')}")
            print(f"Updated: {match.get('updatedAt', 'N/A')}")
        
        if len(matches) > 5:
            print(f"\n... –∏ –µ—â–µ {len(matches) - 5} –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ {filename}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
