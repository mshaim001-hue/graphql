#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã public.object
"""

import requests
import json
import os

def load_token():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞"""
    try:
        with open('.env', 'r') as f:
            for line in f:
                if line.startswith('GRAPHQL_TOKEN='):
                    return line.split('=', 1)[1].strip().strip('"')
    except FileNotFoundError:
        print("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

def test_objects_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –æ–±—ä–µ–∫—Ç–æ–≤ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã"""
    token = load_token()
    if not token:
        return
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    query = """
    query {
        object(order_by: {createdAt: desc}) {
            id
            name
            type
            attrs
            childrenAttrs
            createdAt
            updatedAt
            campus
            authorId
        }
    }
    """
    
    print(f"\n{'='*60}")
    print(f"üîç –¢–ï–°–¢ OBJECTS (–±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å)")
    print(f"{'='*60}")
    
    response = requests.post(
        'https://01.tomorrow-school.ai/api/graphql-engine/v1/graphql',
        json={'query': query},
        headers=headers
    )
    
    if response.status_code == 200:
        data = response.json()
        if 'errors' in data:
            print("‚ùå –û—à–∏–±–∫–∏ GraphQL:")
            for error in data['errors']:
                print(f"   - {error['message']}")
        else:
            objects = data['data']['object']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(objects)} –æ–±—ä–µ–∫—Ç–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            filename = f"object_data_{len(objects)}_items.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(objects, f, indent=2, ensure_ascii=False)
            
            print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            print(f"üìä –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –æ–±—ä–µ–∫—Ç–æ–≤:")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ–±—ä–µ–∫—Ç–æ–≤
            for i, obj in enumerate(objects[:10], 1):
                print(f"\n--- Object #{i} ---")
                print(f"ID: {obj.get('id', 'N/A')}")
                print(f"Name: {obj.get('name', 'N/A')}")
                print(f"Type: {obj.get('type', 'N/A')}")
                print(f"Campus: {obj.get('campus', 'N/A')}")
                print(f"AuthorId: {obj.get('authorId', 'N/A')}")
                print(f"Created: {obj.get('createdAt', 'N/A')}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º attrs –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                attrs = obj.get('attrs', {})
                if attrs:
                    print(f"Attrs: {json.dumps(attrs, indent=2)}")
                else:
                    print("Attrs: {}")
            
            if len(objects) > 10:
                print(f"\n... –∏ –µ—â–µ {len(objects) - 10} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ {filename}")
    else:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")

def test_objects_by_type():
    """–¢–µ—Å—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º"""
    token = load_token()
    if not token:
        return
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º
    query = """
    query {
        object(where: {type: {_in: ["project", "exercise", "administration", "checkpoint"]}}, limit: 50) {
            id
            name
            type
            attrs
            createdAt
            campus
        }
    }
    """
    
    print(f"\n{'='*60}")
    print(f"üîç –¢–ï–°–¢ OBJECTS (–ø–æ —Ç–∏–ø–∞–º)")
    print(f"{'='*60}")
    
    response = requests.post(
        'https://01.tomorrow-school.ai/api/graphql-engine/v1/graphql',
        json={'query': query},
        headers=headers
    )
    
    if response.status_code == 200:
        data = response.json()
        if 'errors' in data:
            print("‚ùå –û—à–∏–±–∫–∏ GraphQL:")
            for error in data['errors']:
                print(f"   - {error['message']}")
        else:
            objects = data['data']['object']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(objects)} –æ–±—ä–µ–∫—Ç–æ–≤")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
            by_type = {}
            for obj in objects:
                obj_type = obj.get('type', 'unknown')
                if obj_type not in by_type:
                    by_type[obj_type] = []
                by_type[obj_type].append(obj)
            
            print(f"\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:")
            for obj_type, type_objects in by_type.items():
                print(f"  {obj_type}: {len(type_objects)} –æ–±—ä–µ–∫—Ç–æ–≤")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ–±—ä–µ–∫—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                for i, obj in enumerate(type_objects[:3], 1):
                    print(f"    {i}. {obj.get('name', 'N/A')} (ID: {obj.get('id', 'N/A')})")
                
                if len(type_objects) > 3:
                    print(f"    ... –∏ –µ—â–µ {len(type_objects) - 3} –æ–±—ä–µ–∫—Ç–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            filename = f"object_by_type_data_{len(objects)}_items.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(objects, f, indent=2, ensure_ascii=False)
            
            print(f"\nüìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
    else:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")

def test_objects_with_attrs():
    """–¢–µ—Å—Ç –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏"""
    token = load_token()
    if not token:
        return
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    query = """
    query {
        object(where: {attrs: {_is_null: false}}, limit: 30) {
            id
            name
            type
            attrs
            createdAt
            campus
        }
    }
    """
    
    print(f"\n{'='*60}")
    print(f"üîç –¢–ï–°–¢ OBJECTS (—Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏)")
    print(f"{'='*60}")
    
    response = requests.post(
        'https://01.tomorrow-school.ai/api/graphql-engine/v1/graphql',
        json={'query': query},
        headers=headers
    )
    
    if response.status_code == 200:
        data = response.json()
        if 'errors' in data:
            print("‚ùå –û—à–∏–±–∫–∏ GraphQL:")
            for error in data['errors']:
                print(f"   - {error['message']}")
        else:
            objects = data['data']['object']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(objects)} –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
            for i, obj in enumerate(objects[:10], 1):
                print(f"\n--- Object #{i} ---")
                print(f"ID: {obj.get('id', 'N/A')}")
                print(f"Name: {obj.get('name', 'N/A')}")
                print(f"Type: {obj.get('type', 'N/A')}")
                print(f"Campus: {obj.get('campus', 'N/A')}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                attrs = obj.get('attrs', {})
                if attrs:
                    print(f"Attrs:")
                    for key, value in attrs.items():
                        print(f"  {key}: {value}")
                else:
                    print("Attrs: {}")
            
            if len(objects) > 10:
                print(f"\n... –∏ –µ—â–µ {len(objects) - 10} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            filename = f"object_with_attrs_data_{len(objects)}_items.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(objects, f, indent=2, ensure_ascii=False)
            
            print(f"\nüìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
    else:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")

def test_objects_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏"""
    token = load_token()
    if not token:
        return
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö "checkpoint")
    query = """
    query {
        object(where: {name: {_ilike: "%checkpoint%"}}, limit: 20) {
            id
            name
            type
            attrs
            createdAt
            campus
        }
    }
    """
    
    print(f"\n{'='*60}")
    print(f"üîç –¢–ï–°–¢ OBJECTS (–ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏)")
    print(f"{'='*60}")
    
    response = requests.post(
        'https://01.tomorrow-school.ai/api/graphql-engine/v1/graphql',
        json={'query': query},
        headers=headers
    )
    
    if response.status_code == 200:
        data = response.json()
        if 'errors' in data:
            print("‚ùå –û—à–∏–±–∫–∏ GraphQL:")
            for error in data['errors']:
                print(f"   - {error['message']}")
        else:
            objects = data['data']['object']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(objects)} –æ–±—ä–µ–∫—Ç–æ–≤ —Å 'checkpoint' –≤ –∏–º–µ–Ω–∏")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            for i, obj in enumerate(objects, 1):
                print(f"\n--- Object #{i} ---")
                print(f"ID: {obj.get('id', 'N/A')}")
                print(f"Name: {obj.get('name', 'N/A')}")
                print(f"Type: {obj.get('type', 'N/A')}")
                print(f"Campus: {obj.get('campus', 'N/A')}")
                print(f"Created: {obj.get('createdAt', 'N/A')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            filename = f"object_search_checkpoint_data_{len(objects)}_items.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(objects, f, indent=2, ensure_ascii=False)
            
            print(f"\nüìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
    else:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è public.object")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    test_objects_basic()
    test_objects_by_type()
    test_objects_with_attrs()
    test_objects_search()
    
    print(f"\n{'='*60}")
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print(f"{'='*60}")