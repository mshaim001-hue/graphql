#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ ID –∏–∑ –∞—É–¥–∏—Ç–æ–≤
"""

import requests
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def make_graphql_request(query, variables=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å GraphQL –∑–∞–ø—Ä–æ—Å"""
    api_url = 'https://01.tomorrow-school.ai/api/graphql-engine/v1/graphql'
    token = os.getenv('GRAPHQL_TOKEN')
    
    if not token:
        print("‚ùå GRAPHQL_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return None
    
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}'
    }
    
    payload = {
        'query': query
    }
    
    if variables:
        payload['variables'] = variables
    
    try:
        response = requests.post(api_url, headers=headers, json=payload)
        response.raise_for_status()
        
        data = response.json()
        
        if 'errors' in data:
            print(f"‚ùå GraphQL –æ—à–∏–±–∫–∏: {data['errors']}")
            return None
        
        return data.get('data', {})
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def check_results_exist():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("=" * 50)
    
    # ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∞—É–¥–∏—Ç–æ–≤
    result_ids = [53666, 46370, 95241, 54335, 53034, 240932]
    
    for result_id in result_ids:
        print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {result_id}:")
        
        query = """
        query GetResultById($resultId: Int!) {
            result(where: {id: {_eq: $resultId}}) {
                id
                userId
                objectId
                grade
                object {
                    id
                    name
                    type
                    authorId
                }
                user {
                    id
                    login
                    profile
                    attrs
                }
            }
        }
        """
        
        variables = {"resultId": result_id}
        data = make_graphql_request(query, variables)
        
        if data and 'result' in data:
            results = data['result']
            if results:
                result = results[0]
                print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω")
                print(f"     UserId: {result['userId']}")
                print(f"     ObjectId: {result['objectId']}")
                print(f"     Grade: {result['grade']}")
                
                if result.get('object'):
                    obj = result['object']
                    print(f"     Project: {obj['name']} (Type: {obj['type']})")
                    print(f"     AuthorId: {obj['authorId']}")
                else:
                    print(f"     ‚ùå No object data")
                
                if result.get('user'):
                    user = result['user']
                    print(f"     Author: {user['login']}")
                else:
                    print(f"     ‚ùå No user data")
            else:
                print(f"  ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")

def check_all_results():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("=" * 50)
    
    query = """
    query GetAllResults($limit: Int!) {
        result(limit: $limit, order_by: {id: desc}) {
            id
            userId
            objectId
            grade
            object {
                id
                name
                type
                authorId
            }
            user {
                id
                login
            }
        }
    }
    """
    
    variables = {"limit": 20}
    data = make_graphql_request(query, variables)
    
    if data and 'result' in data:
        results = data['result']
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        
        for result in results[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"  Result {result['id']}:")
            print(f"    UserId: {result['userId']}")
            print(f"    ObjectId: {result['objectId']}")
            print(f"    Grade: {result['grade']}")
            
            if result.get('object'):
                obj = result['object']
                print(f"    Project: {obj['name']} (Type: {obj['type']})")
            else:
                print(f"    ‚ùå No object data")
            
            if result.get('user'):
                user = result['user']
                print(f"    Author: {user['login']}")
            else:
                print(f"    ‚ùå No user data")
            print()
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

def check_audit_result_connection():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É –∞—É–¥–∏—Ç–∞–º–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ audit -> result")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∏–º –∞—É–¥–∏—Ç—ã —Å resultId
    query = """
    query GetAuditsWithResultId {
        audit(limit: 10, order_by: {id: desc}) {
            id
            grade
            resultId
            result {
                id
                userId
                objectId
                object {
                    name
                    type
                }
                user {
                    login
                }
            }
        }
    }
    """
    
    data = make_graphql_request(query)
    
    if data and 'audit' in data:
        audits = data['audit']
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏—Ç–æ–≤: {len(audits)}")
        
        for audit in audits:
            print(f"  –ê—É–¥–∏—Ç {audit['id']}:")
            print(f"    Grade: {audit['grade']}")
            print(f"    ResultId: {audit['resultId']}")
            print(f"    Has Result: {bool(audit.get('result'))}")
            
            if audit.get('result'):
                result = audit['result']
                print(f"    ‚úÖ Result data available")
                if result.get('object'):
                    print(f"    Project: {result['object']['name']}")
                if result.get('user'):
                    print(f"    Author: {result['user']['login']}")
            else:
                print(f"    ‚ùå No result data")
            print()
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ–≤")

if __name__ == "__main__":
    check_results_exist()
    check_all_results()
    check_audit_result_connection()