#!/usr/bin/env python3
"""
–ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é public.object
"""

import json
import os
from collections import Counter

def load_json_file(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON —Ñ–∞–π–ª"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except json.JSONDecodeError:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞ {filename}")
        return None

def analyze_objects_summary():
    """–ê–Ω–∞–ª–∏–∑ —Å–≤–æ–¥–∫–∏ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º"""
    print("üöÄ –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ü–û –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Æ PUBLIC.OBJECT")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    objects_1000 = load_json_file("object_analysis_1000_items.json")
    objects_astanahub = load_json_file("object_astanahub_50_items.json")
    relationships = load_json_file("object_relationships_analysis_100_items.json")
    
    if not objects_1000:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    print(f"\nüìä –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(objects_1000)}")
    
    if objects_astanahub:
        print(f"   –û–±—ä–µ–∫—Ç–æ–≤ –∫–∞–º–ø—É—Å–∞ astanahub: {len(objects_astanahub)}")
    
    if relationships:
        print(f"   –ó–∞–ø–∏—Å–µ–π progress –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–µ–π: {len(relationships)}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤
    types = [obj.get('type', 'unknown') for obj in objects_1000]
    type_counts = Counter(types)
    
    print(f"\nüè∑Ô∏è –¢–û–ü-10 –¢–ò–ü–û–í –û–ë–™–ï–ö–¢–û–í:")
    for obj_type, count in type_counts.most_common(10):
        percentage = (count / len(objects_1000)) * 100
        print(f"   {obj_type:<20}: {count:>4} ({percentage:>5.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–º–ø—É—Å–æ–≤
    campuses = [obj.get('campus', 'None') for obj in objects_1000]
    campus_counts = Counter(campuses)
    
    print(f"\nüè´ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–ê–ú–ü–£–°–ê–ú:")
    for campus, count in campus_counts.most_common():
        percentage = (count / len(objects_1000)) * 100
        campus_str = str(campus) if campus is not None else "None"
        print(f"   {campus_str:<15}: {count:>4} ({percentage:>5.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    languages = []
    for obj in objects_1000:
        attrs = obj.get('attrs', {})
        if 'language' in attrs:
            languages.append(attrs['language'])
    
    if languages:
        lang_counts = Counter(languages)
        print(f"\nüíª –Ø–ó–´–ö–ò –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø:")
        for lang, count in lang_counts.most_common():
            percentage = (count / len(languages)) * 100
            print(f"   {lang:<15}: {count:>4} ({percentage:>5.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    all_attrs = []
    for obj in objects_1000:
        attrs = obj.get('attrs', {})
        all_attrs.extend(attrs.keys())
    
    if all_attrs:
        attr_counts = Counter(all_attrs)
        print(f"\nüè∑Ô∏è –¢–û–ü-10 –ê–¢–†–ò–ë–£–¢–û–í:")
        for attr, count in attr_counts.most_common(10):
            percentage = (count / len(objects_1000)) * 100
            print(f"   {attr:<20}: {count:>4} ({percentage:>5.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π
    if relationships:
        print(f"\nüîó –ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ï–ô:")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
        object_attempts = {}
        for record in relationships:
            obj = record.get('object', {})
            if obj:
                obj_id = obj.get('id')
                obj_name = obj.get('name', 'Unknown')
                if obj_id not in object_attempts:
                    object_attempts[obj_id] = {'name': obj_name, 'attempts': 0, 'successful': 0}
                
                object_attempts[obj_id]['attempts'] += 1
                grade = record.get('grade')
                if grade is not None and grade >= 1:
                    object_attempts[obj_id]['successful'] += 1
        
        print(f"   –¢–æ–ø-5 –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
        sorted_objects = sorted(object_attempts.items(), key=lambda x: x[1]['attempts'], reverse=True)
        for i, (obj_id, stats) in enumerate(sorted_objects[:5], 1):
            success_rate = (stats['successful'] / stats['attempts'] * 100) if stats['attempts'] > 0 else 0
            print(f"   {i}. {stats['name']:<25}: {stats['attempts']} –ø–æ–ø—ã—Ç–æ–∫, {stats['successful']} —É—Å–ø–µ—à–Ω—ã—Ö ({success_rate:.1f}%)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        user_stats = {}
        for record in relationships:
            user_id = record.get('userId')
            if user_id:
                if user_id not in user_stats:
                    user_stats[user_id] = {'attempts': 0, 'successful': 0}
                
                user_stats[user_id]['attempts'] += 1
                grade = record.get('grade')
                if grade is not None and grade >= 1:
                    user_stats[user_id]['successful'] += 1
        
        print(f"\n   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for user_id, stats in user_stats.items():
            success_rate = (stats['successful'] / stats['attempts'] * 100) if stats['attempts'] > 0 else 0
            print(f"   User {user_id}: {stats['attempts']} –ø–æ–ø—ã—Ç–æ–∫, {stats['successful']} —É—Å–ø–µ—à–Ω—ã—Ö ({success_rate:.1f}%)")

def show_created_files():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    print(f"\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
    
    object_files = [
        "object_analysis_1000_items.json",
        "object_astanahub_50_items.json", 
        "object_relationships_analysis_100_items.json",
        "object_attrs_analysis_200_items.json",
        "object_by_type_data_50_items.json",
        "object_with_attrs_data_30_items.json",
        "object_data_20_items.json",
        "object_search_checkpoint_data_20_items.json"
    ]
    
    test_files = [
        "test_object.py",
        "test_object_advanced.py", 
        "test_object_search.py"
    ]
    
    report_files = [
        "object_analysis_report.md"
    ]
    
    print(f"\n   üìä –î–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö:")
    for filename in object_files:
        if os.path.exists(filename):
            size = os.path.getsize(filename)
            size_kb = size / 1024
            print(f"   ‚úÖ {filename:<40} ({size_kb:.1f} KB)")
        else:
            print(f"   ‚ùå {filename:<40} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    print(f"\n   üß™ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã:")
    for filename in test_files:
        if os.path.exists(filename):
            size = os.path.getsize(filename)
            size_kb = size / 1024
            print(f"   ‚úÖ {filename:<40} ({size_kb:.1f} KB)")
        else:
            print(f"   ‚ùå {filename:<40} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    print(f"\n   üìã –û—Ç—á–µ—Ç—ã:")
    for filename in report_files:
        if os.path.exists(filename):
            size = os.path.getsize(filename)
            size_kb = size / 1024
            print(f"   ‚úÖ {filename:<40} ({size_kb:.1f} KB)")
        else:
            print(f"   ‚ùå {filename:<40} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")

def show_recommendations():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –î–ê–õ–¨–ù–ï–ô–®–ï–ì–û –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:")
    print(f"   1. –ò–∑—É—á–∏—Ç—å —Å–≤—è–∑–∏ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—ã progress, result, event")
    print(f"   2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–æ–≤")
    print(f"   3. –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤")
    print(f"   4. –ò–∑—É—á–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –Ω–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π")
    print(f"   5. –°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏")
    print(f"   6. –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
    print(f"   7. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")

if __name__ == "__main__":
    analyze_objects_summary()
    show_created_files()
    show_recommendations()
    
    print(f"\n{'='*80}")
    print("‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ public.object –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ñ–∞–π–ª–µ: object_analysis_report.md")
    print(f"{'='*80}")