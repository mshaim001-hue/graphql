#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å—Ö–µ–º—ã GraphQL API Tomorrow School
"""

import requests
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def make_graphql_request(query, description=""):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å GraphQL –∑–∞–ø—Ä–æ—Å"""
    api_url = 'https://01.tomorrow-school.ai/api/graphql-engine/v1/graphql'
    token = os.getenv('GRAPHQL_TOKEN')
    
    if not token:
        print("‚ùå GRAPHQL_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return None
    
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}'
    }
    
    payload = {
        'query': query
    }
    
    try:
        response = requests.post(api_url, headers=headers, json=payload)
        response.raise_for_status()
        
        data = response.json()
        
        if 'errors' in data:
            print(f"‚ùå GraphQL –æ—à–∏–±–∫–∏: {data['errors']}")
            return None
        
        return data.get('data', {})
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def explore_schema():
    """–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ö–µ–º—É GraphQL"""
    print("üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã GraphQL API Tomorrow School")
    print("=" * 60)
    
    # 1. –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ –∫–æ—Ä–Ω–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    print("\n1. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ –∫–æ—Ä–Ω–µ –∑–∞–ø—Ä–æ—Å–æ–≤:")
    query = """
    query {
        __schema {
            queryType {
                fields {
                    name
                    description
                    type {
                        name
                        kind
                    }
                }
            }
        }
    }
    """
    
    data = make_graphql_request(query)
    if data and '__schema' in data:
        fields = data['__schema']['queryType']['fields']
        for field in fields:
            print(f"  - {field['name']}: {field['type']['name']} ({field['type']['kind']})")
            if field.get('description'):
                print(f"    {field['description']}")
    
    # 2. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ audit
    print("\n2. –ü–æ–ª—è —Ç–∏–ø–∞ 'audit':")
    query = """
    query {
        __type(name: "audit") {
            fields {
                name
                description
                type {
                    name
                    kind
                }
            }
        }
    }
    """
    
    data = make_graphql_request(query)
    if data and '__type' in data and data['__type']:
        fields = data['__type']['fields']
        for field in fields:
            print(f"  - {field['name']}: {field['type']['name']} ({field['type']['kind']})")
            if field.get('description'):
                print(f"    {field['description']}")
    else:
        print("  ‚ùå –¢–∏–ø 'audit' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 3. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ result
    print("\n3. –ü–æ–ª—è —Ç–∏–ø–∞ 'result':")
    query = """
    query {
        __type(name: "result") {
            fields {
                name
                description
                type {
                    name
                    kind
                }
            }
        }
    }
    """
    
    data = make_graphql_request(query)
    if data and '__type' in data and data['__type']:
        fields = data['__type']['fields']
        for field in fields:
            print(f"  - {field['name']}: {field['type']['name']} ({field['type']['kind']})")
            if field.get('description'):
                print(f"    {field['description']}")
    else:
        print("  ‚ùå –¢–∏–ø 'result' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 4. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ object
    print("\n4. –ü–æ–ª—è —Ç–∏–ø–∞ 'object':")
    query = """
    query {
        __type(name: "object") {
            fields {
                name
                description
                type {
                    name
                    kind
                }
            }
        }
    }
    """
    
    data = make_graphql_request(query)
    if data and '__type' in data and data['__type']:
        fields = data['__type']['fields']
        for field in fields:
            print(f"  - {field['name']}: {field['type']['name']} ({field['type']['kind']})")
            if field.get('description'):
                print(f"    {field['description']}")
    else:
        print("  ‚ùå –¢–∏–ø 'object' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 5. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ user
    print("\n5. –ü–æ–ª—è —Ç–∏–ø–∞ 'user':")
    query = """
    query {
        __type(name: "user") {
            fields {
                name
                description
                type {
                    name
                    kind
                }
            }
        }
    }
    """
    
    data = make_graphql_request(query)
    if data and '__type' in data and data['__type']:
        fields = data['__type']['fields']
        for field in fields:
            print(f"  - {field['name']}: {field['type']['name']} ({field['type']['kind']})")
            if field.get('description'):
                print(f"    {field['description']}")
    else:
        print("  ‚ùå –¢–∏–ø 'user' –Ω–µ –Ω–∞–π–¥–µ–Ω")

def test_simple_queries():
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
    print("=" * 40)
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    test_queries = [
        ("–ü–æ–ø—ã—Ç–∫–∞ 1: user", "query { user { id } }"),
        ("–ü–æ–ø—ã—Ç–∫–∞ 2: users", "query { users { id } }"),
        ("–ü–æ–ø—ã—Ç–∫–∞ 3: audit", "query { audit { id } }"),
        ("–ü–æ–ø—ã—Ç–∫–∞ 4: audits", "query { audits { id } }"),
        ("–ü–æ–ø—ã—Ç–∫–∞ 5: result", "query { result { id } }"),
        ("–ü–æ–ø—ã—Ç–∫–∞ 6: results", "query { results { id } }"),
        ("–ü–æ–ø—ã—Ç–∫–∞ 7: object", "query { object { id } }"),
        ("–ü–æ–ø—ã—Ç–∫–∞ 8: objects", "query { objects { id } }"),
    ]
    
    for description, query in test_queries:
        print(f"\n{description}:")
        data = make_graphql_request(query)
        if data:
            print(f"  ‚úÖ –£—Å–ø–µ—Ö: {list(data.keys())}")
        else:
            print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å")

if __name__ == "__main__":
    explore_schema()
    test_simple_queries()
