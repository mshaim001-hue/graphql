#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
"""

import requests
import json
import os

def load_token():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞"""
    try:
        with open('.env', 'r') as f:
            for line in f:
                if line.startswith('GRAPHQL_TOKEN='):
                    return line.split('=', 1)[1].strip().strip('"')
    except FileNotFoundError:
        print("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

def test_alphabetical_projects():
    """–¢–µ—Å—Ç –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    token = load_token()
    if not token:
        return
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ AstanaHub
    query = """
    query {
        object(where: {type: {_eq: "project"}, attrs: {_has_key: "language"}, campus: {_eq: "astanahub"}}, order_by: {createdAt: desc}) {
            id
            name
            type
            attrs
            createdAt
            updatedAt
            campus
            authorId
        }
    }
    """
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª—Ñ–∞–≤–∏—Ç–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤...")
    
    response = requests.post(
        'https://01.tomorrow-school.ai/api/graphql-engine/v1/graphql',
        json={'query': query},
        headers=headers
    )
    
    if response.status_code == 200:
        data = response.json()
        
        if 'errors' in data:
            print("‚ùå –û—à–∏–±–∫–∏ GraphQL:")
            for error in data['errors']:
                print(f"   - {error['message']}")
        else:
            objects = data['data']['object']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(objects)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            sorted_projects = sorted(objects, key=lambda x: x.get('name', '').lower())
            
            print(f"\nüìã –ü—Ä–æ–µ–∫—Ç—ã –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–µ—Ä–≤—ã–µ 20):")
            print("=" * 80)
            
            for i, project in enumerate(sorted_projects[:20], 1):
                createdAt = project.get('createdAt', 'N/A')
                if createdAt != 'N/A':
                    createdAt = createdAt.split('T')[0]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                
                language = project.get('attrs', {}).get('language', 'Unknown')
                groupMin = project.get('attrs', {}).get('groupMin', 'N/A')
                groupMax = project.get('attrs', {}).get('groupMax', 'N/A')
                groupInfo = f"{groupMin}-{groupMax} people" if groupMin != 'N/A' and groupMax != 'N/A' else 'Individual'
                
                print(f"{i:2d}. {project.get('name', 'N/A')}")
                print(f"     Language: {language} | Group: {groupInfo} | Created: {createdAt}")
                print("-" * 40)
            
            if len(sorted_projects) > 20:
                print(f"\n... –∏ –µ—â–µ {len(sorted_projects) - 20} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:")
            is_sorted = True
            for i in range(1, len(sorted_projects)):
                prev_name = sorted_projects[i-1].get('name', '').lower()
                curr_name = sorted_projects[i].get('name', '').lower()
                if prev_name > curr_name:
                    is_sorted = False
                    print(f"‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: '{prev_name}' > '{curr_name}'")
                    break
            
            if is_sorted:
                print("‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è!")
            else:
                print("‚ùå –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —è–∑—ã–∫–∞–º
            languages = {}
            for project in sorted_projects:
                language = project.get('attrs', {}).get('language', 'Unknown')
                languages[language] = languages.get(language, 0) + 1
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º:")
            for lang, count in sorted(languages.items(), key=lambda x: x[1], reverse=True):
                print(f"   {lang}: {count} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    else:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")

if __name__ == "__main__":
    test_alphabetical_projects()