#!/usr/bin/env python3
import os
import requests
import json

def load_token():
    try:
        with open('.env', 'r') as f:
            for line in f:
                if line.startswith('GRAPHQL_TOKEN='):
                    return line.split('=', 1)[1].strip().strip('"')
    except FileNotFoundError:
        print("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

def check_specific_results():
    token = load_token()
    if not token:
        return
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö resultId –∏–∑ –∞—É–¥–∏—Ç–æ–≤
    result_ids = [240932, 222723, 209551, 202043, 200411]
    
    for result_id in result_ids:
        query = f"""
        query {{
            result(where: {{id: {{_eq: {result_id}}}}}) {{
                id
                userId
                objectId
                grade
                object {{
                    id
                    name
                    type
                }}
                user {{
                    id
                    login
                }}
            }}
        }}
        """
        
        print(f"\n{'='*50}")
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º resultId: {result_id}")
        print(f"{'='*50}")
        
        response = requests.post(
            'https://01.tomorrow-school.ai/api/graphql-engine/v1/graphql',
            json={'query': query},
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            if 'errors' in data:
                print("‚ùå –û—à–∏–±–∫–∏ GraphQL:")
                for error in data['errors']:
                    print(f"   - {error['message']}")
            else:
                results = data['data']['result']
                if results and len(results) > 0:
                    result = results[0]
                    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω:")
                    print(f"   ID: {result['id']}")
                    print(f"   UserId: {result.get('userId', 'N/A')}")
                    print(f"   ObjectId: {result.get('objectId', 'N/A')}")
                    print(f"   Grade: {result.get('grade', 'N/A')}")
                    
                    if result.get('object'):
                        print(f"   Project: {result['object'].get('name', 'N/A')} (—Ç–∏–ø: {result['object'].get('type', 'N/A')})")
                    else:
                        print("   Project: null")
                    
                    if result.get('user'):
                        print(f"   Author: {result['user'].get('login', 'N/A')} (ID: {result['user'].get('id', 'N/A')})")
                    else:
                        print("   Author: null")
                else:
                    print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ù–ï –Ω–∞–π–¥–µ–Ω - –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")

def check_audit_with_direct_result():
    """–ü—Ä–æ–≤–µ—Ä–∏–º –∞—É–¥–∏—Ç —Å –ø—Ä—è–º—ã–º –∑–∞–ø—Ä–æ—Å–æ–º result"""
    token = load_token()
    if not token:
        return
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # –í–æ–∑—å–º–µ–º –ø–µ—Ä–≤—ã–π –∞—É–¥–∏—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ resultId –Ω–∞–ø—Ä—è–º—É—é
    query = """
    query {
        audit(where: {auditor: {login: {_eq: "mshaimard"}}}, limit: 1, order_by: {createdAt: desc}) {
            id
            resultId
            grade
            createdAt
        }
    }
    """
    
    print(f"\n{'='*60}")
    print(f"üîç –ü–†–û–í–ï–†–Ø–ï–ú –ü–ï–†–í–´–ô –ê–£–î–ò–¢ –ò –ï–ì–û RESULT")
    print(f"{'='*60}")
    
    response = requests.post(
        'https://01.tomorrow-school.ai/api/graphql-engine/v1/graphql',
        json={'query': query},
        headers=headers
    )
    
    if response.status_code == 200:
        data = response.json()
        if 'errors' in data:
            print("‚ùå –û—à–∏–±–∫–∏ GraphQL:")
            for error in data['errors']:
                print(f"   - {error['message']}")
        else:
            audits = data['data']['audit']
            if audits and len(audits) > 0:
                audit = audits[0]
                result_id = audit['resultId']
                print(f"–ê—É–¥–∏—Ç ID: {audit['id']}")
                print(f"ResultId: {result_id}")
                print(f"Grade: {audit.get('grade', 'N/A')}")
                
                if result_id:
                    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º —ç—Ç–æ—Ç resultId –æ—Ç–¥–µ–ª—å–Ω–æ
                    result_query = f"""
                    query {{
                        result(where: {{id: {{_eq: {result_id}}}}}) {{
                            id
                            object {{
                                name
                                type
                            }}
                            user {{
                                login
                            }}
                        }}
                    }}
                    """
                    
                    result_response = requests.post(
                        'https://01.tomorrow-school.ai/api/graphql-engine/v1/graphql',
                        json={'query': result_query},
                        headers=headers
                    )
                    
                    if result_response.status_code == 200:
                        result_data = result_response.json()
                        if 'errors' in result_data:
                            print("‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ result:")
                            for error in result_data['errors']:
                                print(f"   - {error['message']}")
                        else:
                            results = result_data['data']['result']
                            if results and len(results) > 0:
                                result = results[0]
                                print(f"‚úÖ Result –Ω–∞–π–¥–µ–Ω:")
                                print(f"   Project: {result.get('object', {}).get('name', 'N/A')}")
                                print(f"   Author: {result.get('user', {}).get('login', 'N/A')}")
                            else:
                                print("‚ùå Result –ù–ï –Ω–∞–π–¥–µ–Ω - –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!")
                else:
                    print("‚ùå ResultId —Ä–∞–≤–µ–Ω null")
            else:
                print("‚ùå –ê—É–¥–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    check_specific_results()
    check_audit_with_direct_result()

