#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –ø–æ —è–∑—ã–∫–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import requests
import json
import os

def load_token():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞"""
    try:
        with open('.env', 'r') as f:
            for line in f:
                if line.startswith('GRAPHQL_TOKEN='):
                    return line.split('=', 1)[1].strip().strip('"')
    except FileNotFoundError:
        print("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

def test_successful_projects():
    """–¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ —è–∑—ã–∫–∞–º"""
    token = load_token()
    if not token:
        return
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    query = """
    query {
        object(where: {type: {_eq: "project"}, attrs: {_has_key: "language"}, campus: {_eq: "astanahub"}}, order_by: {createdAt: desc}) {
            id
            name
            type
            attrs
            createdAt
            updatedAt
            campus
            authorId
        }
        progress(where: {object: {type: {_eq: "project"}, campus: {_eq: "astanahub"}}}) {
            grade
            createdAt
            path
            object {
                id
                name
                type
                attrs
                campus
            }
        }
    }
    """
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ —è–∑—ã–∫–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    response = requests.post(
        'https://01.tomorrow-school.ai/api/graphql-engine/v1/graphql',
        json={'query': query},
        headers=headers
    )
    
    if response.status_code == 200:
        data = response.json()
        
        if 'errors' in data:
            print("‚ùå –û—à–∏–±–∫–∏ GraphQL:")
            for error in data['errors']:
                print(f"   - {error['message']}")
        else:
            objects = data['data']['object']
            progress_data = data['data']['progress']
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(objects)} –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ {len(progress_data)} –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            projects_dict = {obj['id']: obj for obj in objects}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ —è–∑—ã–∫–∞–º
            successful_by_language = {}
            total_by_language = {}
            
            for progress in progress_data:
                project_id = progress['object']['id']
                if project_id in projects_dict:
                    project = projects_dict[project_id]
                    language = project.get('attrs', {}).get('language', 'Unknown')
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —è–∑—ã–∫–∞
                    if language not in total_by_language:
                        total_by_language[language] = 0
                        successful_by_language[language] = 0
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
                    total_by_language[language] += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω—ã–º (grade >= 1)
                    if progress.get('grade') is not None and progress.get('grade') >= 1:
                        successful_by_language[language] += 1
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–µ–∫—Ç–æ–≤
            sorted_languages = sorted(total_by_language.items(), key=lambda x: x[1], reverse=True)
            
            print(f"\nüìä –£—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ —è–∑—ã–∫–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:")
            print("=" * 80)
            print(f"{'–Ø–∑—ã–∫':<25} {'–í—Å–µ–≥–æ':<8} {'–£—Å–ø–µ—à–Ω—ã—Ö':<10} {'–ü—Ä–æ—Ü–µ–Ω—Ç':<10}")
            print("-" * 80)
            
            for language, total in sorted_languages:
                successful = successful_by_language.get(language, 0)
                percentage = (successful / total * 100) if total > 0 else 0
                print(f"{language:<25} {total:<8} {successful:<10} {percentage:>6.1f}%")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            graph_data = []
            for language, total in sorted_languages:
                successful = successful_by_language.get(language, 0)
                percentage = (successful / total * 100) if total > 0 else 0
                graph_data.append({
                    'language': language,
                    'total': total,
                    'successful': successful,
                    'percentage': percentage
                })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            filename = "successful_projects_data.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(graph_data, f, indent=2, ensure_ascii=False)
            
            print(f"\nüìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —è–∑—ã–∫–æ–≤
            print(f"\nüèÜ –¢–æ–ø-5 —è–∑—ã–∫–æ–≤ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏:")
            for i, data in enumerate(graph_data[:5], 1):
                print(f"   {i}. {data['language']}: {data['successful']}/{data['total']} ({data['percentage']:.1f}%)")
    else:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")

if __name__ == "__main__":
    test_successful_projects()