#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import requests
import json
import os

def load_token():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞"""
    try:
        with open('.env', 'r') as f:
            for line in f:
                if line.startswith('GRAPHQL_TOKEN='):
                    return line.split('=', 1)[1].strip().strip('"')
    except FileNotFoundError:
        print("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

def test_final_graph():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≥—Ä–∞—Ñ–∏–∫–∞ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
    token = load_token()
    if not token:
        return
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ AstanaHub
    query = """
    query {
        object(where: {type: {_eq: "project"}, attrs: {_has_key: "language"}, campus: {_eq: "astanahub"}}, order_by: {createdAt: desc}) {
            id
            name
            type
            attrs
            createdAt
            updatedAt
            campus
            authorId
        }
    }
    """
    
    print("üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≥—Ä–∞—Ñ–∏–∫–∞ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    response = requests.post(
        'https://01.tomorrow-school.ai/api/graphql-engine/v1/graphql',
        json={'query': query},
        headers=headers
    )
    
    if response.status_code == 200:
        data = response.json()
        
        if 'errors' in data:
            print("‚ùå –û—à–∏–±–∫–∏ GraphQL:")
            for error in data['errors']:
                print(f"   - {error['message']}")
        else:
            objects = data['data']['object']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(objects)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            languages = {}
            for obj in objects:
                language = obj.get('attrs', {}).get('language', 'Unknown')
                languages[language] = languages.get(language, 0) + 1
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–µ–∫—Ç–æ–≤
            sorted_languages = sorted(languages.items(), key=lambda x: x[1], reverse=True)
            
            print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:")
            print("=" * 60)
            
            for i, (language, count) in enumerate(sorted_languages, 1):
                percentage = (count / len(objects)) * 100
                print(f"{i:2d}. {language:<25}: {count:>3} –ø—Ä–æ–µ–∫—Ç–æ–≤ ({percentage:5.1f}%)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø-5 —è–∑—ã–∫–æ–≤
            print(f"\nüèÜ –¢–æ–ø-5 —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:")
            for i, (language, count) in enumerate(sorted_languages[:5], 1):
                print(f"   {i}. {language}: {count} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º SVG –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            svg_data = {
                'total_projects': len(objects),
                'languages': sorted_languages,
                'top_5': sorted_languages[:5],
                'graph_title': 'Programming Languages in AstanaHub Projects'
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            filename = "final_languages_graph.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(svg_data, f, indent=2, ensure_ascii=False)
            
            print(f"\nüìÅ –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç JavaScript –∫–æ–¥—É
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è JavaScript –∫–æ–¥—É:")
            js_data = [
                ('Go', 27), ('python', 21), ('Open', 14), ('dart', 14),
                ('cybersecurity', 11), ('unreal engine', 10), ('JavaScript', 10),
                ('blockchain', 7), ('DevOps', 7), ('sys', 6), ('Java', 5), ('rust', 4)
            ]
            
            matches = 0
            for js_lang, js_count in js_data:
                actual_count = languages.get(js_lang, 0)
                if actual_count == js_count:
                    print(f"   ‚úÖ {js_lang}: {actual_count} (—Å–æ–≤–ø–∞–¥–∞–µ—Ç)")
                    matches += 1
                else:
                    print(f"   ‚ùå {js_lang}: {actual_count} (–æ–∂–∏–¥–∞–ª–æ—Å—å {js_count})")
            
            print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {matches}/{len(js_data)} —è–∑—ã–∫–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å JavaScript –∫–æ–¥–æ–º")
            
            if matches >= len(js_data) * 0.8:  # 80% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            else:
                print("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JavaScript –∫–æ–¥–µ")
    else:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")

if __name__ == "__main__":
    test_final_graph()